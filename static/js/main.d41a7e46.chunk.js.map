{"version":3,"sources":["components/Header.js","components/Form.js","components/WeatherDetailComponent.js","components/WeatherDetails.js","components/WeatherGif.js","components/WeatherSummary.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Header","target","rel","href","icon","faCode","style","paddingRight","className","faMeteor","faCoffee","paddingLeft","Form","props","state","handleChange","bind","event","name","value","this","setState","onSubmit","handleSubmit","type","faLocationArrow","id","placeholder","onChange","faSearch","Component","WeatherDetailComponent","header","WeatherDetails","getSunRiseOrFall","timestamp","moment","format","data","wind","speed","main","humidity","faSun","sys","sunrise","faMoon","sunset","visibility","pressure","WeatherGif","hasData","src","handleClick","getGifSrc","prevProps","query","fetch","mode","response","json","gif","images","original","url","console","log","alt","onClick","faSpinner","WeatherSummary","convertTemp","temp","f","Math","round","weather","description","feels_like","temp_min","temp_max","Weather","perferredUnit","getTheWeather","preventDefault","apiKey","weatherData","cod","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gVAkDeA,EA5CA,WACb,OACE,gCACE,6BACE,4BACE,4BACE,uBACEC,OAAO,SACPC,IAAI,sBACJC,KAAK,8CAEL,kBAAC,IAAD,CACEC,KAAMC,IACNC,MAAO,CAAEC,aAAc,WAP3B,gBAYF,4BACE,uBAAGJ,KAAK,IAAIK,UAAU,QACpB,kBAAC,IAAD,CAAiBJ,KAAMK,MACvB,6BAFF,qBAMF,4BACE,uBACER,OAAO,SACPC,IAAI,sBACJC,KAAK,oCAHP,SAME,kBAAC,IAAD,CACEC,KAAMM,IACNJ,MAAO,CAAEK,YAAa,iB,mECAvBC,G,wDAlCb,WAAYC,GAAQ,IAAD,8BACjB,gBACKC,MAAQ,GAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAJH,E,yDAONC,GAAQ,IAAD,EACMA,EAAMhB,OAAtBiB,EADU,EACVA,KAAMC,EADI,EACJA,MAEdC,KAAKC,SAAL,eAAiBH,EAAOC,M,+BAIxB,OACE,0BAAMG,SAAUF,KAAKP,MAAMU,cACzB,4BAAQC,KAAK,UACX,kBAAC,IAAD,CAAiBpB,KAAMqB,OAEzB,2BACEC,GAAG,aACHF,KAAK,OACLN,KAAK,QACLS,YAAY,qBACZC,SAAUR,KAAKL,eAEjB,gCACE,kBAAC,IAAD,CAAiBX,KAAMyB,Y,GA5BdC,c,iBCMJC,G,MATgB,SAAClB,GAC9B,OACE,yBAAKL,UAAU,UACb,0BAAMA,UAAU,UAAUK,EAAMmB,OAAhC,KACA,0BAAMxB,UAAU,SAASK,EAAMM,UCgCtBc,EA/BQ,SAACpB,GACtB,IAKMqB,EAAmB,SAACC,GAAD,OAAeC,IAAmB,IAAZD,GAAkBE,OAAO,OAExE,OACE,yBAAK7B,UAAU,WACb,yBAAKkB,GAAG,mBACN,kBAAC,EAAD,CAAwBM,OAAQ,OAAQb,MAV9B,UAASN,EAAMyB,KAAKC,KAAKC,MAAzB,UAWV,kBAAC,EAAD,CAAwBR,OAAQ,WAAYb,MAV9B,UAASN,EAAMyB,KAAKG,KAAKC,SAAzB,OAYd,kBAAC,EAAD,CACEV,OAAQ,kBAAC,IAAD,CAAiB5B,KAAMuC,MAC/BxB,MAAOe,EAAiBrB,EAAMyB,KAAKM,IAAIC,WAGzC,kBAAC,EAAD,CACEb,OAAQ,kBAAC,IAAD,CAAiB5B,KAAM0C,MAC/B3B,MAAOe,EAAiBrB,EAAMyB,KAAKM,IAAIG,UAGzC,kBAAC,EAAD,CAAwBf,OAAQ,aAAcb,MApB9B,UAASN,EAAMyB,KAAKU,WAAa,IAAjC,QAqBhB,kBAAC,EAAD,CAAwBhB,OAAQ,WAAYb,MAtB9B,UAASN,EAAMyB,KAAKG,KAAKQ,SAAzB,YCmDPC,E,kDAxDb,WAAYrC,GAAQ,IAAD,8BACjB,gBACKC,MAAQ,CACXqC,SAAS,EACTC,IAAK,IAGP,EAAKC,YAAc,EAAKA,YAAYrC,KAAjB,gBAPF,E,0LAWXI,KAAKkC,Y,+IAGMC,GACbnC,KAAKP,MAAM2C,QAAUD,EAAUC,OACjCpC,KAAKkC,c,8JAKDlC,KAAKkC,Y,mQAIPE,EAAQpC,KAAKP,MAAM2C,MACV,mC,kBAGYC,MAAM,mDAAD,OAHjB,mCAGiB,cACqCD,GAC/D,CAAEE,KAAM,S,cAFJC,E,gBAKYA,EAASC,O,OAArBC,E,OAENzC,KAAKC,SAAS,CAAE8B,SAAS,EAAMC,IAAKS,EAAIvB,KAAKwB,OAAOC,SAASC,M,kDAE7DC,QAAQC,IAAI,QAAZ,M,+IAMF,OADAD,QAAQC,IAAI9C,KAAKP,OAEf,0BAAML,UAAU,eACbY,KAAKN,MAAMqC,QACV,yBAAKgB,IAAI,QAAQf,IAAKhC,KAAKN,MAAMsC,IAAKgB,QAAShD,KAAKiC,cAEpD,kBAAC,IAAD,CAAiBjD,KAAMiE,W,GAlDRvC,aCuCVwC,E,kDAtCb,WAAYzD,GAAQ,IAAD,8BACjB,gBAGF0D,YAAc,SAACC,GACb,IAAIC,EAAuB,GAAjBD,EAAO,QAAe,EAAI,GACpC,OAAOE,KAAKC,MAAMF,GAAK,SANN,E,qDAUjB,OACE,yBAAK/C,GAAG,oBACN,kBAAC,EAAD,CAAY8B,MAAOpC,KAAKP,MAAMyB,KAAKsC,QAAQ,GAAGC,cAC9C,yBAAKrE,UAAU,iBACb,4BACGY,KAAKmD,YAAYnD,KAAKP,MAAMyB,KAAKG,KAAK+B,MAAO,IAC7CpD,KAAKP,MAAMyB,KAAKsC,QAAQ,GAAGC,aAE9B,yBAAKrE,UAAU,mBACb,kBAAC,EAAD,CACEwB,OAAQ,aACRb,MAAOC,KAAKmD,YAAYnD,KAAKP,MAAMyB,KAAKG,KAAKqC,cAE/C,kBAAC,EAAD,CACE9C,OAAQ,MACRb,MAAOC,KAAKmD,YAAYnD,KAAKP,MAAMyB,KAAKG,KAAKsC,YAE/C,kBAAC,EAAD,CACE/C,OAAQ,OACRb,MAAOC,KAAKmD,YAAYnD,KAAKP,MAAMyB,KAAKG,KAAKuC,mB,GA9B9BlD,aCuDdmD,E,kDArDb,WAAYpE,GAAQ,IAAD,8BACjB,gBACKC,MAAQ,CACXqC,SAAS,EACT+B,cAAe,aACf1B,MAAO,IAGT,EAAKjC,aAAe,EAAKA,aAAaP,KAAlB,gBARH,E,0LAYXI,KAAK+D,gB,yIAGAlE,GACXA,EAAMmE,iBACN,IAAI5B,EAAQvC,EAAMhB,OAAO,GAAGkB,MACxBqC,GAAOpC,KAAK+D,cAAc3B,K,6KAGZA,E,+BAAQ,mB,SACHC,MAAM,qDAAD,OAC2BD,EAD3B,kBAC0CpC,KAAKP,MAAMwE,QAC/E,CAAE3B,KAAM,S,cAFJC,E,gBAKoBA,EAASC,O,OAEX,SAFlB0B,E,QAEUC,KACdnE,KAAKC,SAAS,CAAEuD,QAASU,EAAanC,SAAS,I,qIAOjD,OAFAc,QAAQC,IAAI9C,KAAKN,MAAM8D,SAGrB,yBAAKlD,GAAG,WACN,yBAAKA,GAAG,mBACN,kBAAC,EAAD,CAAMH,aAAcH,KAAKG,gBAE1BH,KAAKN,MAAMqC,QACV,6BACE,kBAAC,EAAD,CAAgBb,KAAMlB,KAAKN,MAAM8D,UACjC,kBAAC,EAAD,CAAgBtC,KAAMlB,KAAKN,MAAM8D,WAEjC,U,GAhDU9C,a,MCUP0D,MAVf,WACE,OACE,yBAAKhF,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAS6E,OAAO,uCCGFI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.d41a7e46.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../sass/header.scss\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCoffee, faCode, faMeteor } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Header = () => {\n  return (\n    <header>\n      <nav>\n        <ul>\n          <li>\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://github.com/gerrgg/react-to-weather\"\n            >\n              <FontAwesomeIcon\n                icon={faCode}\n                style={{ paddingRight: \".5rem\" }}\n              />\n              Source Code\n            </a>\n          </li>\n          <li>\n            <a href=\"/\" className=\"logo\">\n              <FontAwesomeIcon icon={faMeteor} />\n              <br></br>\n              React to Weather\n            </a>\n          </li>\n          <li>\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://gerrgg.github.io/resume/\"\n            >\n              Resume\n              <FontAwesomeIcon\n                icon={faCoffee}\n                style={{ paddingLeft: \".5rem\" }}\n              />\n            </a>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"../sass/form.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLocationArrow, faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nclass Form extends Component {\n  constructor(props) {\n    super();\n    this.state = {};\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.props.handleSubmit}>\n        <button type=\"button\">\n          <FontAwesomeIcon icon={faLocationArrow} />\n        </button>\n        <input\n          id=\"search-bar\"\n          type=\"text\"\n          name=\"query\"\n          placeholder=\"Petoskey, Michigan\"\n          onChange={this.handleChange}\n        />\n        <button>\n          <FontAwesomeIcon icon={faSearch} />\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\n\nconst WeatherDetailComponent = (props) => {\n  return (\n    <div className=\"detail\">\n      <span className=\"header\">{props.header}:</span>\n      <span className=\"value\">{props.value}</span>\n    </div>\n  );\n};\n\nexport default WeatherDetailComponent;\n","import React from \"react\";\nimport moment from \"moment\";\nimport \"../sass/weather.scss\";\nimport WeatherDetailComponent from \"./WeatherDetailComponent\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSun, faMoon } from \"@fortawesome/free-solid-svg-icons\";\n\nconst WeatherDetails = (props) => {\n  const getWind = () => `${props.data.wind.speed} mph`;\n  const getHumidity = () => `${props.data.main.humidity}%`;\n  const getPressure = () => `${props.data.main.pressure} mb`;\n  const getVisibility = () => `${props.data.visibility / 1000}km`;\n\n  const getSunRiseOrFall = (timestamp) => moment(timestamp * 1000).format(\"LT\");\n\n  return (\n    <div className=\"wrapper\">\n      <div id=\"weather-details\">\n        <WeatherDetailComponent header={\"Wind\"} value={getWind()} />\n        <WeatherDetailComponent header={\"Humidity\"} value={getHumidity()} />\n\n        <WeatherDetailComponent\n          header={<FontAwesomeIcon icon={faSun} />}\n          value={getSunRiseOrFall(props.data.sys.sunrise)}\n        />\n\n        <WeatherDetailComponent\n          header={<FontAwesomeIcon icon={faMoon} />}\n          value={getSunRiseOrFall(props.data.sys.sunset)}\n        />\n\n        <WeatherDetailComponent header={\"Visibility\"} value={getVisibility()} />\n        <WeatherDetailComponent header={\"Pressure\"} value={getPressure()} />\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherDetails;\n","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\n\nclass WeatherGif extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      hasData: false,\n      src: \"\",\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.getGifSrc();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.query !== prevProps.query) {\n      this.getGifSrc();\n    }\n  }\n\n  async handleClick() {\n    await this.getGifSrc();\n  }\n\n  async getGifSrc() {\n    let query = this.props.query;\n    let apiKey = \"XglG7Kno2HckkrUjCimsJOv8YE0STATQ\";\n\n    try {\n      const response = await fetch(\n        `https://api.giphy.com/v1/gifs/translate?api_key=${apiKey}&s=${query}`,\n        { mode: \"cors\" }\n      );\n\n      const gif = await response.json();\n\n      this.setState({ hasData: true, src: gif.data.images.original.url });\n    } catch (e) {\n      console.log(\"error\", e);\n    }\n  }\n\n  render() {\n    console.log(this.props);\n    return (\n      <span className=\"weather-gif\">\n        {this.state.hasData ? (\n          <img alt=\"sunny\" src={this.state.src} onClick={this.handleClick} />\n        ) : (\n          <FontAwesomeIcon icon={faSpinner} />\n        )}\n      </span>\n    );\n  }\n}\n\nexport default WeatherGif;\n","import React, { Component } from \"react\";\nimport WeatherGif from \"./WeatherGif\";\nimport WeatherDetailComponent from \"./WeatherDetailComponent\";\n\nclass WeatherSummary extends Component {\n  constructor(props) {\n    super();\n  }\n\n  convertTemp = (temp) => {\n    let f = ((temp - 273.15) * 9) / 5 + 32;\n    return Math.round(f) + \"°F\";\n  };\n\n  render() {\n    return (\n      <div id=\"weather-summmary\">\n        <WeatherGif query={this.props.data.weather[0].description} />\n        <div className=\"summary-right\">\n          <h1>\n            {this.convertTemp(this.props.data.main.temp)}{\" \"}\n            {this.props.data.weather[0].description}\n          </h1>\n          <div className=\"summary-details\">\n            <WeatherDetailComponent\n              header={\"Feels Like\"}\n              value={this.convertTemp(this.props.data.main.feels_like)}\n            />\n            <WeatherDetailComponent\n              header={\"Low\"}\n              value={this.convertTemp(this.props.data.main.temp_min)}\n            />\n            <WeatherDetailComponent\n              header={\"High\"}\n              value={this.convertTemp(this.props.data.main.temp_max)}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WeatherSummary;\n","import React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport WeatherDetails from \"./WeatherDetails\";\nimport WeatherSummary from \"./WeatherSummary\";\n\nclass Weather extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      hasData: false,\n      perferredUnit: \"Fahrenheit\",\n      query: \"\", // we need to pass query to the form as a prop\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.getTheWeather();\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    let query = event.target[1].value;\n    if (query) this.getTheWeather(query);\n  }\n\n  async getTheWeather(query = \"Petoskey, MI, US\") {\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${query}&appid=${this.props.apiKey}`,\n      { mode: \"cors\" }\n    );\n\n    const weatherData = await response.json();\n\n    if (weatherData.cod !== \"404\") {\n      this.setState({ weather: weatherData, hasData: true });\n    }\n  }\n\n  render() {\n    console.log(this.state.weather);\n\n    return (\n      <div id=\"weather\">\n        <div id=\"search-location\">\n          <Form handleSubmit={this.handleSubmit} />\n        </div>\n        {this.state.hasData ? (\n          <div>\n            <WeatherDetails data={this.state.weather} />\n            <WeatherSummary data={this.state.weather} />\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default Weather;\n","import React from 'react';\nimport Header from './components/Header'\nimport Weather from './components/Weather'\nimport './sass/app.scss'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Weather apiKey='f49ab69788385465860411f295879340' />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}